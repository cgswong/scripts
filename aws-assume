#!/usr/bin/env bash
# Uses AWS STS to assume role, setting environment variables
# To run: . aws-assume <cmd>

CMD="$@"
: ${AWS_ACCOUNT_ID:="123456542501"}
: ${AWS_ROLE_NAME:="myrole"}
: ${AWS_PROFILE_NAME:="myrole-np"}
: ${AWS_SESSION_NAME:="${AWS_PROFILE_NAME}"}

ASSUME_ROLE="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${AWS_ROLE_NAME}"
TMP_FILE="${HOME}/.aws/credentials.tmp"

case ${CMD} in
  "unset" | "clear")
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
  unset AWS_PROFILE
  return 0
  ;;
esac

aws --profile=${AWS_PROFILE_NAME} sts assume-role --output json --role-arn ${ASSUME_ROLE} --role-session-name ${AWS_SESSION_NAME} &> ${TMP_FILE}

if [[ $? -ne 0 ]]; then
  cat ${TMP_FILE}
  return 1
fi

ACCESS_KEY=$(cat ${TMP_FILE} | jq -r ".Credentials.AccessKeyId")
SECRET_KEY=$(cat ${TMP_FILE} | jq -r ".Credentials.SecretAccessKey")
SESSION_TOKEN=$(cat ${TMP_FILE} | jq -r ".Credentials.SessionToken")
EXPIRATION=$(cat ${TMP_FILE} | jq -r ".Credentials.Expiration")

echo "Retrieved temp access key ${ACCESS_KEY} for role ${ASSUME_ROLE}. Key will expire at ${EXPIRATION}"

export AWS_ACCESS_KEY_ID=${ACCESS_KEY}
export AWS_SECRET_ACCESS_KEY=${SECRET_KEY}
export AWS_SESSION_TOKEN=${SESSION_TOKEN}
export AWS_PROFILE=${AWS_PROFILE_NAME}
export AWS_DEFAULT_PROFILE=${AWS_PROFILE_NAME}

[[ ! -z ${CMD} ]] && AWS_ACCESS_KEY_ID=${ACCESS_KEY} AWS_SECRET_ACCESS_KEY=${SECRET_KEY} AWS_SESSION_TOKEN=${SESSION_TOKEN} AWS_PROFILE=${AWS_PROFILE_NAME} AWS_DEFAULT_PROFILE=${AWS_PROFILE_NAME} ${CMD}
