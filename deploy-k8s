#!/usr/bin/env bash
# Setup and launch Kubernetes for multi-AZ.

pkg=${0##*/}

# set colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)

# Set variables
: ${KUBEUP:="~/repos/workspace/k8s/kubernetes/cluster/kube-up.sh"}
: ${INSTANCE_PREFIX:="k8"}
: ${KUBE_AWS_INSTANCE_PREFIX:="k8"}
: ${AWS_S3_BUCKET:="${INSTANCE_PREFIX}-artifacts"}
: ${AWS_S3_REGION:="us-east-1"}
: ${KUBERNETES_PROVIDER:="aws"}
: ${KUBE_AWS_ZONE:="us-east-1a"}
: ${KUBE_OS_DISTRIBUTION="ubuntu"}
: ${KUBE_USE_EXISTING_MASTER:=true}
: ${MASTER_SIZE:="m4.medium"}
: ${NODE_SIZE:="t2.large"}
: ${NUM_NODES:=3}
IFS=','

export KUBEUP
export INSTANCE_PREFIX
export KUBE_AWS_INSTANCE_PREFIX
export AWS_S3_BUCKET
export AWS_S3_REGION
export KUBERNETES_PROVIDER
export KUBE_AWS_ZONE
export KUBE_OS_DISTRIBUTION
export KUBE_USE_EXISTING_MASTER
export MASTER_SIZE
export NODE_SIZE
export NUM_NODES
export MULTIZONE=true

# Write messages to screen
log() {
  echo "$(date +"%F %T") $(hostname) [${pkg}] $1"
}

# Write exit failure messages to syslog and exit with failure code (i.e. non-zero)
die() {
  log "${red}[FAIL] $1${reset}" && exit 1
}

# Usage function
usage() {
cat <<EOM

${pkg}

Create single master, multi-az Kubernetes cluster

Usage: ${pkg} [OPTIONS]

Options:
  -h,--help
    Output help (this message)

  --zone=[availability zone]
    Comma separated list of AWS Availability Zones

  --create
    Create new cluster, otherwise we assume an existing

  --node-count=3
    Create specified number of nodes

  --node-size=m4.large
    Specify the node size

  --master-size=m4.large
    Specify the master size

  --subnet=172.20.0.0/24,172.20.2.0/24,172.20.4.0/24
    Comma separated list of CIDR blocks for subnets in which to deploy.

EOM
}

# Deploy new cluster
launch_new() {
  log "Deploying Kubernetes..."
  MULTIZONE=${MULTIZONE} KUBERNETES_PROVIDER=${KUBERNETES_PROVIDER} KUBE_AWS_ZONE=${KUBE_AWS_ZONE} NUM_NODES=${NUM_NODES} AWS_S3_REGION=${AWS_S3_REGION} ${KUBEUP}
}

# Add new node to existing cluster
launch_existing() {
  MASTER_PRIVATE_IP=$(aws ec2 describe-instances --max-items=1 --filters "Name=tag:Name,Values=$MASTER_NAME" --output text --query 'Reservations[*].Instances[*].PrivateIpAddress')
  export MASTER_INTERNAL_IP=${MASTER_PRIVATE_IP}

  log "Expanding Kubernetes into ${KUBE_AWS_ZONE} with master IP ${MASTER_PRIVATE_IP}"
  KUBE_USE_EXISTING_MASTER=${KUBE_USE_EXISTING_MASTER} MULTIZONE=${MULTIZONE} KUBERNETES_PROVIDER=${KUBERNETES_PROVIDER} KUBE_AWS_ZONE=${KUBE_AWS_ZONE} NUM_NODES=${NUM_NODES} KUBE_SUBNET_CIDR=${KUBE_SUBNET_CIDR} MASTER_PRIVATE_IP=${MASTER_PRIVATE_IP} AWS_S3_REGION=${AWS_S3_REGION} ${KUBEUP}
}

# Process command line
for arg in "$@"; do
  if [[ -n "$prev_arg"]] ; then
    eval "$prev_arg=\$arg"
    prev_arg=
  fi

  case "$arg" in
    -*=*) optarg=${arg#[-_a-zA-Z0-9]*=} ;;
    *) optarg= ;;
  esac

  case $arg in
    -h | --help)      usage && exit 0 ;;
    --zone=*)         ZONE_ARRAY=($optarg) ;;
    --subnet=*)       SUBNET_ARRAY=($optarg) ;;
    --create)         KUBE_USE_EXISTING_MASTER=false ;;
    --node-count=*)   NUM_NODES="$optarg" ;;
    --node-size=*)    NODE_SIZE="$optarg" ;;
    --master-size=*)  MASTER_SIZE="$optarg" ;;
    -*)               die "Unknown option $arg, exiting..." ;;
    *)
      log "${red}[FAIL]Unknown option or missing argument for $arg, exiting.${reset}"
      usage
      exit 1
      ;;
  esac
done

# Set AWS zones and subnets, and deploy new cluster if required,
# adding a node if NUM_NODES > 1
KUBE_AWS_ZONE=${ZONE_ARRAY[0]}
KUBE_SUBNET_CIDR=${SUBNET_ARRAY[0]}
if [[ ${KUBE_USE_EXISTING_MASTER} == "false" ]]; then
  launch_new
  if [[ ${NUM_NODES} -gt 1 ]]; then
    for ((i=1; i < ${#ZONE_ARRAY[@]}; i++)); do
      KUBE_AWS_ZONE=${ZONE_ARRAY[$i]}
      KUBE_SUBNET_CIDR=${SUBNET_ARRAY[$i]}
      launch_existing
    done
  fi
else
  launch_existing
  if [[ ${NUM_NODES} -gt 1 ]]; then
    for ((i=1; i < ${#ZONE_ARRAY[@]}; i++)); do
      KUBE_AWS_ZONE=${ZONE_ARRAY[$i]}
      KUBE_SUBNET_CIDR=${SUBNET_ARRAY[$i]}
      launch_existing
    done
  fi
fi
