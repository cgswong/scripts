#!/bin/bash
# Create background SOCKS connection

prg=${BASH_SOURCE##*/}
SOCKS_PORT=${SOCKS_PORT:=9090}
PID_FILE="/tmp/${prg}-${SOCKS_PORT}.pid"
# These are taken from environment (check ~/.extra)
BASTION_KEYS=${BASTION_KEYS:="${HOME}/.aws/keys/local-kp.pem ${HOME}/.aws/keys/bastion-kp.pem"}
BASTION_CONN=${BASTION_CONN:="$(whoami)@bastion.com ec2-user@bastion.net"}

# set colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
reset=$(tput sgr0)

log() {
  # Write messages to screen
  echo "$(date +"%F %T") [${prg}] $1"
}

die() {
  log "${red}[FAIL] $1${reset}" >&2 && return 1
}

usage() {
cat <<EOM

${prg}

Create SSH tunnel connection.

Usage: ${prg} [options]

Options:
  -h, --help
      Output help (this message)

  -c=, --conn=[connection_string]
      SSH connection string to jumpbox/bastion host(s). For multiple jumpboxes space separate
      in the order of connection and enclose in quotes.

  -k=, --keys=[bastion_keys]
      SSH key(s) to use for connection to jumbox/bastion. Space separated, enclosed in quotes.
      These get loaded into memory.
EOM
}

start_conn() {
  # Run some checks
  if [[ -f "${PID_FILE}" ]]; then
    die "Process file exists! Process ID: $(cat ${PID_FILE})"
    exit 1
  fi

  # Load keys
  for skey in "${BASTION_KEYS}"; do
    log "${green}Adding SSH key(s): ${skey}${reset}"
    ssh-add ${skey} &>/dev/null
  done

  # Create tunnel
  log "${green}Creating SSH SOCKS tunnel using port ${SOCKS_PORT}.${reset}"
  ssh -CND ${SOCKS_PORT} -J ${BASTION_CONN} &>/dev/null 
}

# Process command line
for arg in "$@"; do
  if test -n "$prev_arg"; then
    eval "$prev_arg=\$arg"
    prev_arg=
  fi

  case "$arg" in
      -*=*) optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
      *) optarg= ;;
  esac

  case $arg in
    -h | --help)
      usage && exit 0
      ;;
    -c=* | --conn=*)
      BASTION_CONN="$optarg"
      ;;
    -k=* | --keys=*)
      BASTION_KEYS="$optarg"
      ;;
    -*)
      die "${red}Unknown option ${arg}, exiting...${reset}"
      ;;
    *)
      log "${red}Unknown option or missing argument for ${arg}, exiting.${reset}"
      usage
      exit 1
      ;;
  esac
done

start_conn
